// Code generated by MockGen. DO NOT EDIT.
// Source: ./services.go

// Package blockhandler is a generated GoMock package.
package blockhandler

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockService is a mock of BlockService interface.
type MockBlockService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceMockRecorder
}

// MockBlockServiceMockRecorder is the mock recorder for MockBlockService.
type MockBlockServiceMockRecorder struct {
	mock *MockBlockService
}

// NewMockBlockService creates a new mock instance.
func NewMockBlockService(ctrl *gomock.Controller) *MockBlockService {
	mock := &MockBlockService{ctrl: ctrl}
	mock.recorder = &MockBlockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService) EXPECT() *MockBlockServiceMockRecorder {
	return m.recorder
}

// GetBlockByHash mocks base method.
func (m *MockBlockService) GetBlockByHash(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockServiceMockRecorder) GetBlockByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockService)(nil).GetBlockByHash), ctx, hash)
}

// GetBlockByNumber mocks base method.
func (m *MockBlockService) GetBlockByNumber(ctx context.Context, id *big.Int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockBlockServiceMockRecorder) GetBlockByNumber(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockService)(nil).GetBlockByNumber), ctx, id)
}

// GetBlockHeaderByHash mocks base method.
func (m *MockBlockService) GetBlockHeaderByHash(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaderByHash", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByHash indicates an expected call of GetBlockHeaderByHash.
func (mr *MockBlockServiceMockRecorder) GetBlockHeaderByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByHash", reflect.TypeOf((*MockBlockService)(nil).GetBlockHeaderByHash), ctx, hash)
}

// GetBlockHeaderByNumber mocks base method.
func (m *MockBlockService) GetBlockHeaderByNumber(ctx context.Context, id *big.Int) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaderByNumber", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByNumber indicates an expected call of GetBlockHeaderByNumber.
func (mr *MockBlockServiceMockRecorder) GetBlockHeaderByNumber(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByNumber", reflect.TypeOf((*MockBlockService)(nil).GetBlockHeaderByNumber), ctx, id)
}
